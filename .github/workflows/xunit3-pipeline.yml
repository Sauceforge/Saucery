name: XUnit3 Only

on:
  push:
    paths:
      - '.github/workflows/xunit3-pipeline.yml'
      - 'Saucery.XUnit3/**'
      - 'Merlin.XUnit3/**'
      - 'Merlin.XUnit3.RealDevices/**'
    branches:
      - master
      - 'dependabot/**'
      - 'releases/**'
      - 'feat/**'
      - 'feature/**'
      - 'fix/**'
      - 'test/**'
  workflow_dispatch:

env:
  PROJECT_NAME: Saucery
  SOLN_FILE: Saucery.sln                                                                        # full path to your solution file
  XUNIT3_INT_DIR: Merlin.XUnit3
  XUNIT3_RD_INT_DIR: Merlin.XUnit3.RealDevices         
  XUNIT3_INT_TEST_RESULTS_DIR: Merlin.XUnit3/bin/Release/net9.0/TestResults
  XUNIT3_RD_INT_TEST_RESULTS_DIR: Merlin.XUnit3.RealDevices/bin/Release/net9.0/TestResults
  COVERLET_DIR: ./TestResults
  UT_PROJECT: Saucery.Core.Tests/Saucery.Core.Tests.csproj                                      # full path to your unit test project file
  TT_PROJECT: Template.Tests/Template.Tests.csproj
  M_XUNIT3_PROJECT: Merlin.XUnit3/Merlin.XUnit3.csproj                                             # full path to xunit internal integration test project file
  M_RD_XUNIT3_PROJECT: Merlin.XUnit3.RealDevices/Merlin.XUnit3.RealDevices.csproj                  # full path to xunit internal integration test project file
  SAUCE_USER_NAME: ${{ secrets.SAUCE_USER_NAME }}
  SAUCE_API_KEY: ${{ secrets.SAUCE_API_KEY }}
  CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
  CONFIG: Release
  APP_PACKAGE_PATH: 'published'                                                                 # set this to the path to your web app project, defaults to the repository root
  COVERAGE_FORMAT: cobertura
  UNIT_COVERAGE_FILENAME: cobertura.unit.xml
  XUNIT3_INTEGRATION_COVERAGE_FILENAME: cobertura.xunit3.integration.xml
  XUNIT3_RD_INTEGRATION_COVERAGE_FILENAME: cobertura.xunit3.realdevice.integration.xml
  COVERAGE_THRESHOLD: 80

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v5

    - name: Setup dotnet
      uses: actions/setup-dotnet@v5
      with:
        # Check for latest at link at .NET 9 download page (https://dotnet.microsoft.com/download/dotnet/9.0)
        dotnet-version: 9.0.x

    - name: Compile solution
      run: dotnet build -c ${{ env.CONFIG }}

    - name: Run TUnit Unit tests (with coverage + TRX)
      run: |
       dotnet run -c ${{ env.CONFIG }} --project ${{ env.UT_PROJECT }} -- \
       --report-trx \
       --report-trx-filename "unit.trx" \
       --coverage \
       --coverage-output "${{ github.workspace }}/${{ env.COVERLET_DIR }}/${{ env.UNIT_COVERAGE_FILENAME }}" \
       --coverage-output-format "${{ env.COVERAGE_FORMAT }}" \
       --results-directory "TestResults"

    - name: Run Template Tests
      run: dotnet test -c ${{ env.CONFIG }} --filter "Group=XUnit3" ${{ env.TT_PROJECT }}

    - name: Display structure of downloaded files
      run: ls -R

    - name: Upload TRX
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-trx
        path: ${{ env.COVERLET_DIR }}/unit.trx

    - name: Publish Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results
        path: ${{ env.COVERLET_DIR }}/${{env.UNIT_COVERAGE_FILENAME}}

  xunit3-integration-tests:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Checkout Code
      uses: actions/checkout@v5

    - name: Setup dotnet
      uses: actions/setup-dotnet@v5
      with:
        # Check for latest at link at .NET 9 download page (https://dotnet.microsoft.com/download/dotnet/9.0)
        dotnet-version: 9.0.x

    - name: Restore dependencies
      run: dotnet restore --force

    - name: Build project
      run: dotnet build -c ${{ env.CONFIG }}

    - name: Run XUnit3 Integration Tests # as per https://xunit.net/docs/getting-started/v3/code-coverage-with-mtp
      run: dotnet run -c ${{ env.CONFIG }} --project ${{ env.M_XUNIT3_PROJECT }} -- --coverage --coverage-output-format ${{ env.COVERAGE_FORMAT }} --coverage-output ${{ env.XUNIT3_INTEGRATION_COVERAGE_FILENAME }}
     
    - name: Display structure of downloaded files
      run: ls -R

    - name: Publish Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: xunit3-integration-test-results
        path: ${{ env.XUNIT3_INT_TEST_RESULTS_DIR }}/${{env.XUNIT3_INTEGRATION_COVERAGE_FILENAME}}

  xunit3-real-integration-tests:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Checkout Code
      uses: actions/checkout@v5

    - name: Setup dotnet
      uses: actions/setup-dotnet@v5
      with:
        # Check for latest at link at .NET 9 download page (https://dotnet.microsoft.com/download/dotnet/9.0)
        dotnet-version: 9.0.x
    
    - name: Restore dependencies
      run: dotnet restore --force

    - name: Build project
      run: dotnet build -c ${{ env.CONFIG }}

    - name: Run XUnit3 Real Integration Tests # as per https://xunit.net/docs/getting-started/v3/code-coverage-with-mtp
      run: dotnet run -c ${{ env.CONFIG }} --project ${{ env.M_RD_XUNIT3_PROJECT }} -- --coverage --coverage-output-format ${{ env.COVERAGE_FORMAT }} --coverage-output ${{ env.XUNIT3_RD_INTEGRATION_COVERAGE_FILENAME }}
       
    - name: Publish Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: xunit3-real-integration-test-results
        path: ${{ env.XUNIT3_RD_INT_TEST_RESULTS_DIR }}/${{env.XUNIT3_RD_INTEGRATION_COVERAGE_FILENAME}}

  generate-report:
    runs-on: ubuntu-latest
    needs: [xunit3-integration-tests,
            xunit3-real-integration-tests]
    steps:
    - name: Checkout Code
      uses: actions/checkout@v5

    - name: Download unit-test results
      uses: actions/download-artifact@v5
      with:
        name: unit-test-results

    - name: Download xunit3-integration-test results
      uses: actions/download-artifact@v5
      with:
        name: xunit3-integration-test-results

    - name: Download xunit3-real-integration-test results
      uses: actions/download-artifact@v5
      with:
        name: xunit3-real-integration-test-results

    # - name: Present working directory
    #   run: pwd

    # - name: Display structure of downloaded files
    #   run: ls -R

    - name: ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@5.4.18
      with:
        # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
        reports: ${{env.UNIT_COVERAGE_FILENAME}};{{env.XUNIT3_INTEGRATION_COVERAGE_FILENAME}};{{env.XUNIT3_RD_INTEGRATION_COVERAGE_FILENAME}}
        targetdir: 'coveragereport' # REQUIRED # The directory where the generated report should be saved.
        reporttypes: 'HtmlInline;Cobertura' # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, CsvSummary, Html, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlSummary, JsonSummary, Latex, LatexSummary, lcov, MarkdownSummary, MHtml, PngChart, SonarQube, TeamCitySummary, TextSummary, Xml, XmlSummary

    - name: Upload coverage report artifact
      uses: actions/upload-artifact@v4
      with:
        name: CoverageReport # Artifact name        
        path: coveragereport # Directory containing files to upload
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}

    - name: Bump version and push tag
      if: ${{ (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master') && success() }}
      id: tag_version
      uses: mathieudutour/github-tag-action@v6.2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}